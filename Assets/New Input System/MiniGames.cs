//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/New Input System/MiniGames.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MiniGamesAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MiniGamesAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MiniGames"",
    ""maps"": [
        {
            ""name"": ""MiniGames"",
            ""id"": ""bab2d274-46ca-4ead-a7e3-a6480d906137"",
            ""actions"": [
                {
                    ""name"": ""LockPicking"",
                    ""type"": ""Button"",
                    ""id"": ""54c48060-509f-456f-b8d7-8f7c136812d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Morze"",
                    ""type"": ""Button"",
                    ""id"": ""c260b6d2-1064-4d92-a7be-4d3fb3b2ac35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipVideo"",
                    ""type"": ""Button"",
                    ""id"": ""85973936-9b81-4cbd-9972-ba468327c1db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MorzeButton"",
                    ""type"": ""Button"",
                    ""id"": ""97fd49de-cdb4-4d20-9e6c-2c8479c0b056"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0afbb64-8897-45a1-952b-10b76d6a24fb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockPicking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d492574e-da17-4334-ac3e-a1431c0484b2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold(duration=0.25),Tap(duration=0.15)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Morze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f5d20a2-b145-4e1f-b5a8-4c842ed06fe1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipVideo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""972c267d-6901-4fed-bf4f-a446ac5e9153"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press(pressPoint=0.75,behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MorzeButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MiniGames
        m_MiniGames = asset.FindActionMap("MiniGames", throwIfNotFound: true);
        m_MiniGames_LockPicking = m_MiniGames.FindAction("LockPicking", throwIfNotFound: true);
        m_MiniGames_Morze = m_MiniGames.FindAction("Morze", throwIfNotFound: true);
        m_MiniGames_SkipVideo = m_MiniGames.FindAction("SkipVideo", throwIfNotFound: true);
        m_MiniGames_MorzeButton = m_MiniGames.FindAction("MorzeButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MiniGames
    private readonly InputActionMap m_MiniGames;
    private IMiniGamesActions m_MiniGamesActionsCallbackInterface;
    private readonly InputAction m_MiniGames_LockPicking;
    private readonly InputAction m_MiniGames_Morze;
    private readonly InputAction m_MiniGames_SkipVideo;
    private readonly InputAction m_MiniGames_MorzeButton;
    public struct MiniGamesActions
    {
        private @MiniGamesAction m_Wrapper;
        public MiniGamesActions(@MiniGamesAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LockPicking => m_Wrapper.m_MiniGames_LockPicking;
        public InputAction @Morze => m_Wrapper.m_MiniGames_Morze;
        public InputAction @SkipVideo => m_Wrapper.m_MiniGames_SkipVideo;
        public InputAction @MorzeButton => m_Wrapper.m_MiniGames_MorzeButton;
        public InputActionMap Get() { return m_Wrapper.m_MiniGames; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniGamesActions set) { return set.Get(); }
        public void SetCallbacks(IMiniGamesActions instance)
        {
            if (m_Wrapper.m_MiniGamesActionsCallbackInterface != null)
            {
                @LockPicking.started -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnLockPicking;
                @LockPicking.performed -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnLockPicking;
                @LockPicking.canceled -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnLockPicking;
                @Morze.started -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMorze;
                @Morze.performed -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMorze;
                @Morze.canceled -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMorze;
                @SkipVideo.started -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnSkipVideo;
                @SkipVideo.performed -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnSkipVideo;
                @SkipVideo.canceled -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnSkipVideo;
                @MorzeButton.started -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMorzeButton;
                @MorzeButton.performed -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMorzeButton;
                @MorzeButton.canceled -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMorzeButton;
            }
            m_Wrapper.m_MiniGamesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LockPicking.started += instance.OnLockPicking;
                @LockPicking.performed += instance.OnLockPicking;
                @LockPicking.canceled += instance.OnLockPicking;
                @Morze.started += instance.OnMorze;
                @Morze.performed += instance.OnMorze;
                @Morze.canceled += instance.OnMorze;
                @SkipVideo.started += instance.OnSkipVideo;
                @SkipVideo.performed += instance.OnSkipVideo;
                @SkipVideo.canceled += instance.OnSkipVideo;
                @MorzeButton.started += instance.OnMorzeButton;
                @MorzeButton.performed += instance.OnMorzeButton;
                @MorzeButton.canceled += instance.OnMorzeButton;
            }
        }
    }
    public MiniGamesActions @MiniGames => new MiniGamesActions(this);
    public interface IMiniGamesActions
    {
        void OnLockPicking(InputAction.CallbackContext context);
        void OnMorze(InputAction.CallbackContext context);
        void OnSkipVideo(InputAction.CallbackContext context);
        void OnMorzeButton(InputAction.CallbackContext context);
    }
}
